// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cbdragonfly/cbdragonfly.proto

/*
Package cbdragonfly is a generated protocol buffer package.

It is generated from these files:
	cbdragonfly/cbdragonfly.proto

It has these top-level messages:
	Empty
	MessageResponse
	Tags
	VMMonQryRequest
	VMOnDemandMonQryRequest
	VMMCISMonQryRequest
	CpuOnDemandInfoResponse
	CpuOnDemandInfo
	CpuFreqOnDemandInfoResponse
	CpuFreqOnDemandInfo
	MemoryOnDemandInfoResponse
	MemoryOnDemandInfo
	DiskOnDemandInfoResponse
	DiskOnDemandInfo
	NetworkOnDemandInfoResponse
	NetworkOnDemandInfo
	MCISMonInfoResponse
	CpuInfoResponse
	CpuInfo
	CpuFreqInfoResponse
	CpuFreqInfo
	MemoryInfoResponse
	MemoryInfo
	DiskInfoResponse
	DiskInfo
	NetworkInfoResponse
	NetworkInfo
	MonitoringConfigRequest
	MonitoringConfigResponse
	MonitoringConfigInfo
	InstallAgentRequest
*/
package cbdragonfly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/cloud-barista/cb-spider/api-runtime/grpc-runtime/stub/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty 메시지 정의
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// MessageResponse 응답 메시지 정의
type MessageResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *MessageResponse) Reset()                    { *m = MessageResponse{} }
func (m *MessageResponse) String() string            { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()               {}
func (*MessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Tags struct {
	// 	string host_id = 1 [json_name="hostId", (gogoproto.jsontag) = "hostId", (gogoproto.moretags) = "yaml:\"hostId\""];
	NsId   string `protobuf:"bytes,1,opt,name=ns_id,json=nsId" json:"ns_id,omitempty"`
	McisId string `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId" json:"mcis_id,omitempty"`
	VmId   string `protobuf:"bytes,3,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
}

func (m *Tags) Reset()                    { *m = Tags{} }
func (m *Tags) String() string            { return proto.CompactTextString(m) }
func (*Tags) ProtoMessage()               {}
func (*Tags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Tags) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *Tags) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *Tags) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

type VMMonQryRequest struct {
	NsId               string `protobuf:"bytes,1,opt,name=ns_id" json:"ns_id,omitempty"`
	McisId             string `protobuf:"bytes,2,opt,name=mcis_id" json:"mcis_id,omitempty"`
	VmId               string `protobuf:"bytes,3,opt,name=vm_id" json:"vm_id,omitempty"`
	PeriodType         string `protobuf:"bytes,4,opt,name=period_type,json=periodType" json:"period_type,omitempty"`
	StatisticsCriteria string `protobuf:"bytes,5,opt,name=statistics_criteria,json=statisticsCriteria" json:"statistics_criteria,omitempty"`
	Duration           string `protobuf:"bytes,6,opt,name=duration" json:"duration,omitempty"`
	ServiceType        string `protobuf:"bytes,7,opt,name=service_type,json=duration" json:"service_type,omitempty"`
}

func (m *VMMonQryRequest) Reset()                    { *m = VMMonQryRequest{} }
func (m *VMMonQryRequest) String() string            { return proto.CompactTextString(m) }
func (*VMMonQryRequest) ProtoMessage()               {}
func (*VMMonQryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VMMonQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *VMMonQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *VMMonQryRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *VMMonQryRequest) GetPeriodType() string {
	if m != nil {
		return m.PeriodType
	}
	return ""
}

func (m *VMMonQryRequest) GetStatisticsCriteria() string {
	if m != nil {
		return m.StatisticsCriteria
	}
	return ""
}

func (m *VMMonQryRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *VMMonQryRequest) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

type VMOnDemandMonQryRequest struct {
	NsId    string `protobuf:"bytes,1,opt,name=ns_id" json:"ns_id,omitempty"`
	McisId  string `protobuf:"bytes,2,opt,name=mcis_id" json:"mcis_id,omitempty"`
	VmId    string `protobuf:"bytes,3,opt,name=vm_id" json:"vm_id,omitempty"`
	AgentIp string `protobuf:"bytes,4,opt,name=agent_ip" json:"agent_ip,omitempty"`
}

func (m *VMOnDemandMonQryRequest) Reset()                    { *m = VMOnDemandMonQryRequest{} }
func (m *VMOnDemandMonQryRequest) String() string            { return proto.CompactTextString(m) }
func (*VMOnDemandMonQryRequest) ProtoMessage()               {}
func (*VMOnDemandMonQryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VMOnDemandMonQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *VMOnDemandMonQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *VMOnDemandMonQryRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *VMOnDemandMonQryRequest) GetAgentIp() string {
	if m != nil {
		return m.AgentIp
	}
	return ""
}

type VMMCISMonQryRequest struct {
	NsId       string `protobuf:"bytes,1,opt,name=ns_id" json:"ns_id,omitempty"`
	McisId     string `protobuf:"bytes,2,opt,name=mcis_id" json:"mcis_id,omitempty"`
	VmId       string `protobuf:"bytes,3,opt,name=vm_id" json:"vm_id,omitempty"`
	AgentIp    string `protobuf:"bytes,4,opt,name=agent_ip" json:"agent_ip,omitempty"`
	MetricName string `protobuf:"bytes,5,opt,name=metric_name" json:"metric_name,omitempty"`
}

func (m *VMMCISMonQryRequest) Reset()                    { *m = VMMCISMonQryRequest{} }
func (m *VMMCISMonQryRequest) String() string            { return proto.CompactTextString(m) }
func (*VMMCISMonQryRequest) ProtoMessage()               {}
func (*VMMCISMonQryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VMMCISMonQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *VMMCISMonQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *VMMCISMonQryRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *VMMCISMonQryRequest) GetAgentIp() string {
	if m != nil {
		return m.AgentIp
	}
	return ""
}

func (m *VMMCISMonQryRequest) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

type CpuOnDemandInfoResponse struct {
	Name   string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags            `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Time   string           `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Values *CpuOnDemandInfo `protobuf:"bytes,4,opt,name=values" json:"values,omitempty"`
}

func (m *CpuOnDemandInfoResponse) Reset()                    { *m = CpuOnDemandInfoResponse{} }
func (m *CpuOnDemandInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuOnDemandInfoResponse) ProtoMessage()               {}
func (*CpuOnDemandInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CpuOnDemandInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CpuOnDemandInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CpuOnDemandInfoResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *CpuOnDemandInfoResponse) GetValues() *CpuOnDemandInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type CpuOnDemandInfo struct {
	CpuUtilization float64 `protobuf:"fixed64,1,opt,name=cpu_utilization" json:"cpu_utilization,omitempty"`
	CpuSystem      float64 `protobuf:"fixed64,2,opt,name=cpu_system" json:"cpu_system,omitempty"`
	CpuIdle        float64 `protobuf:"fixed64,3,opt,name=cpu_idle" json:"cpu_idle,omitempty"`
	CpuIowait      float64 `protobuf:"fixed64,4,opt,name=cpu_iowait" json:"cpu_iowait,omitempty"`
	CpuHintr       float64 `protobuf:"fixed64,5,opt,name=cpu_hintr" json:"cpu_hintr,omitempty"`
	CpuSintr       float64 `protobuf:"fixed64,6,opt,name=cpu_sintr" json:"cpu_sintr,omitempty"`
	CpuUser        float64 `protobuf:"fixed64,7,opt,name=cpu_user" json:"cpu_user,omitempty"`
	CpuNice        float64 `protobuf:"fixed64,8,opt,name=cpu_nice" json:"cpu_nice,omitempty"`
	CpuSteal       float64 `protobuf:"fixed64,9,opt,name=cpu_steal" json:"cpu_steal,omitempty"`
	CpuGuest       float64 `protobuf:"fixed64,10,opt,name=cpu_guest" json:"cpu_guest,omitempty"`
	CpuGuestNice   float64 `protobuf:"fixed64,11,opt,name=cpu_guest_nice" json:"cpu_guest_nice,omitempty"`
}

func (m *CpuOnDemandInfo) Reset()                    { *m = CpuOnDemandInfo{} }
func (m *CpuOnDemandInfo) String() string            { return proto.CompactTextString(m) }
func (*CpuOnDemandInfo) ProtoMessage()               {}
func (*CpuOnDemandInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CpuOnDemandInfo) GetCpuUtilization() float64 {
	if m != nil {
		return m.CpuUtilization
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuSystem() float64 {
	if m != nil {
		return m.CpuSystem
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuIdle() float64 {
	if m != nil {
		return m.CpuIdle
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuIowait() float64 {
	if m != nil {
		return m.CpuIowait
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuHintr() float64 {
	if m != nil {
		return m.CpuHintr
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuSintr() float64 {
	if m != nil {
		return m.CpuSintr
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuUser() float64 {
	if m != nil {
		return m.CpuUser
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuNice() float64 {
	if m != nil {
		return m.CpuNice
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuSteal() float64 {
	if m != nil {
		return m.CpuSteal
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuGuest() float64 {
	if m != nil {
		return m.CpuGuest
	}
	return 0
}

func (m *CpuOnDemandInfo) GetCpuGuestNice() float64 {
	if m != nil {
		return m.CpuGuestNice
	}
	return 0
}

type CpuFreqOnDemandInfoResponse struct {
	Name   string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags                `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Time   string               `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Values *CpuFreqOnDemandInfo `protobuf:"bytes,4,opt,name=values" json:"values,omitempty"`
}

func (m *CpuFreqOnDemandInfoResponse) Reset()                    { *m = CpuFreqOnDemandInfoResponse{} }
func (m *CpuFreqOnDemandInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuFreqOnDemandInfoResponse) ProtoMessage()               {}
func (*CpuFreqOnDemandInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CpuFreqOnDemandInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CpuFreqOnDemandInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CpuFreqOnDemandInfoResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *CpuFreqOnDemandInfoResponse) GetValues() *CpuFreqOnDemandInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type CpuFreqOnDemandInfo struct {
	CpuSpeed float64 `protobuf:"fixed64,1,opt,name=cpu_speed" json:"cpu_speed,omitempty"`
}

func (m *CpuFreqOnDemandInfo) Reset()                    { *m = CpuFreqOnDemandInfo{} }
func (m *CpuFreqOnDemandInfo) String() string            { return proto.CompactTextString(m) }
func (*CpuFreqOnDemandInfo) ProtoMessage()               {}
func (*CpuFreqOnDemandInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CpuFreqOnDemandInfo) GetCpuSpeed() float64 {
	if m != nil {
		return m.CpuSpeed
	}
	return 0
}

type MemoryOnDemandInfoResponse struct {
	Name   string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags               `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Time   string              `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Values *MemoryOnDemandInfo `protobuf:"bytes,4,opt,name=values" json:"values,omitempty"`
}

func (m *MemoryOnDemandInfoResponse) Reset()                    { *m = MemoryOnDemandInfoResponse{} }
func (m *MemoryOnDemandInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MemoryOnDemandInfoResponse) ProtoMessage()               {}
func (*MemoryOnDemandInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MemoryOnDemandInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemoryOnDemandInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MemoryOnDemandInfoResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *MemoryOnDemandInfoResponse) GetValues() *MemoryOnDemandInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type MemoryOnDemandInfo struct {
	MemUtilization float64 `protobuf:"fixed64,1,opt,name=mem_utilization" json:"mem_utilization,omitempty"`
	MemTotal       float64 `protobuf:"fixed64,2,opt,name=mem_total" json:"mem_total,omitempty"`
	MemUsed        float64 `protobuf:"fixed64,3,opt,name=mem_used" json:"mem_used,omitempty"`
	MemFree        float64 `protobuf:"fixed64,4,opt,name=mem_free" json:"mem_free,omitempty"`
	MemShared      float64 `protobuf:"fixed64,5,opt,name=mem_shared" json:"mem_shared,omitempty"`
	MemBuffers     float64 `protobuf:"fixed64,6,opt,name=mem_buffers" json:"mem_buffers,omitempty"`
	MemCached      float64 `protobuf:"fixed64,7,opt,name=mem_cached" json:"mem_cached,omitempty"`
}

func (m *MemoryOnDemandInfo) Reset()                    { *m = MemoryOnDemandInfo{} }
func (m *MemoryOnDemandInfo) String() string            { return proto.CompactTextString(m) }
func (*MemoryOnDemandInfo) ProtoMessage()               {}
func (*MemoryOnDemandInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MemoryOnDemandInfo) GetMemUtilization() float64 {
	if m != nil {
		return m.MemUtilization
	}
	return 0
}

func (m *MemoryOnDemandInfo) GetMemTotal() float64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *MemoryOnDemandInfo) GetMemUsed() float64 {
	if m != nil {
		return m.MemUsed
	}
	return 0
}

func (m *MemoryOnDemandInfo) GetMemFree() float64 {
	if m != nil {
		return m.MemFree
	}
	return 0
}

func (m *MemoryOnDemandInfo) GetMemShared() float64 {
	if m != nil {
		return m.MemShared
	}
	return 0
}

func (m *MemoryOnDemandInfo) GetMemBuffers() float64 {
	if m != nil {
		return m.MemBuffers
	}
	return 0
}

func (m *MemoryOnDemandInfo) GetMemCached() float64 {
	if m != nil {
		return m.MemCached
	}
	return 0
}

type DiskOnDemandInfoResponse struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags             `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Time   string            `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Values *DiskOnDemandInfo `protobuf:"bytes,4,opt,name=values" json:"values,omitempty"`
}

func (m *DiskOnDemandInfoResponse) Reset()                    { *m = DiskOnDemandInfoResponse{} }
func (m *DiskOnDemandInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*DiskOnDemandInfoResponse) ProtoMessage()               {}
func (*DiskOnDemandInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DiskOnDemandInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiskOnDemandInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *DiskOnDemandInfoResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *DiskOnDemandInfoResponse) GetValues() *DiskOnDemandInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type DiskOnDemandInfo struct {
	DiskFree        float64 `protobuf:"fixed64,1,opt,name=disk_free" json:"disk_free,omitempty"`
	DiskTotal       float64 `protobuf:"fixed64,2,opt,name=disk_total" json:"disk_total,omitempty"`
	DiskUsed        float64 `protobuf:"fixed64,3,opt,name=disk_used" json:"disk_used,omitempty"`
	DiskUtilization float64 `protobuf:"fixed64,4,opt,name=disk_utilization" json:"disk_utilization,omitempty"`
	KbRead          float64 `protobuf:"fixed64,5,opt,name=kb_read" json:"kb_read,omitempty"`
	KbWritten       float64 `protobuf:"fixed64,6,opt,name=kb_written" json:"kb_written,omitempty"`
	OpsRead         float64 `protobuf:"fixed64,7,opt,name=ops_read" json:"ops_read,omitempty"`
	OpsWrite        float64 `protobuf:"fixed64,8,opt,name=ops_write" json:"ops_write,omitempty"`
}

func (m *DiskOnDemandInfo) Reset()                    { *m = DiskOnDemandInfo{} }
func (m *DiskOnDemandInfo) String() string            { return proto.CompactTextString(m) }
func (*DiskOnDemandInfo) ProtoMessage()               {}
func (*DiskOnDemandInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DiskOnDemandInfo) GetDiskFree() float64 {
	if m != nil {
		return m.DiskFree
	}
	return 0
}

func (m *DiskOnDemandInfo) GetDiskTotal() float64 {
	if m != nil {
		return m.DiskTotal
	}
	return 0
}

func (m *DiskOnDemandInfo) GetDiskUsed() float64 {
	if m != nil {
		return m.DiskUsed
	}
	return 0
}

func (m *DiskOnDemandInfo) GetDiskUtilization() float64 {
	if m != nil {
		return m.DiskUtilization
	}
	return 0
}

func (m *DiskOnDemandInfo) GetKbRead() float64 {
	if m != nil {
		return m.KbRead
	}
	return 0
}

func (m *DiskOnDemandInfo) GetKbWritten() float64 {
	if m != nil {
		return m.KbWritten
	}
	return 0
}

func (m *DiskOnDemandInfo) GetOpsRead() float64 {
	if m != nil {
		return m.OpsRead
	}
	return 0
}

func (m *DiskOnDemandInfo) GetOpsWrite() float64 {
	if m != nil {
		return m.OpsWrite
	}
	return 0
}

type NetworkOnDemandInfoResponse struct {
	Name   string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags                `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Time   string               `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Values *NetworkOnDemandInfo `protobuf:"bytes,4,opt,name=values" json:"values,omitempty"`
}

func (m *NetworkOnDemandInfoResponse) Reset()                    { *m = NetworkOnDemandInfoResponse{} }
func (m *NetworkOnDemandInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkOnDemandInfoResponse) ProtoMessage()               {}
func (*NetworkOnDemandInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *NetworkOnDemandInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkOnDemandInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NetworkOnDemandInfoResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *NetworkOnDemandInfoResponse) GetValues() *NetworkOnDemandInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type NetworkOnDemandInfo struct {
	BytesIn  float64 `protobuf:"fixed64,1,opt,name=bytes_in" json:"bytes_in,omitempty"`
	BytesOut float64 `protobuf:"fixed64,2,opt,name=bytes_out" json:"bytes_out,omitempty"`
	PktsIn   float64 `protobuf:"fixed64,3,opt,name=pkts_in" json:"pkts_in,omitempty"`
	PktsOut  float64 `protobuf:"fixed64,4,opt,name=pkts_out" json:"pkts_out,omitempty"`
}

func (m *NetworkOnDemandInfo) Reset()                    { *m = NetworkOnDemandInfo{} }
func (m *NetworkOnDemandInfo) String() string            { return proto.CompactTextString(m) }
func (*NetworkOnDemandInfo) ProtoMessage()               {}
func (*NetworkOnDemandInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *NetworkOnDemandInfo) GetBytesIn() float64 {
	if m != nil {
		return m.BytesIn
	}
	return 0
}

func (m *NetworkOnDemandInfo) GetBytesOut() float64 {
	if m != nil {
		return m.BytesOut
	}
	return 0
}

func (m *NetworkOnDemandInfo) GetPktsIn() float64 {
	if m != nil {
		return m.PktsIn
	}
	return 0
}

func (m *NetworkOnDemandInfo) GetPktsOut() float64 {
	if m != nil {
		return m.PktsOut
	}
	return 0
}

// ////////////////////////////////
// MCIS 모니터링 메시지 정의
// ////////////////////////////////
type MCISMonInfoResponse struct {
	Result  string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Unit    string `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	Desc    string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Elapsed string `protobuf:"bytes,4,opt,name=elapsed" json:"elapsed,omitempty"`
	SpecId  string `protobuf:"bytes,5,opt,name=spec_id,json=specid" json:"spec_id,omitempty"`
}

func (m *MCISMonInfoResponse) Reset()                    { *m = MCISMonInfoResponse{} }
func (m *MCISMonInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MCISMonInfoResponse) ProtoMessage()               {}
func (*MCISMonInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MCISMonInfoResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *MCISMonInfoResponse) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MCISMonInfoResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MCISMonInfoResponse) GetElapsed() string {
	if m != nil {
		return m.Elapsed
	}
	return ""
}

func (m *MCISMonInfoResponse) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

type CpuInfoResponse struct {
	Name   string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags      `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Values []*CpuInfo `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *CpuInfoResponse) Reset()                    { *m = CpuInfoResponse{} }
func (m *CpuInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuInfoResponse) ProtoMessage()               {}
func (*CpuInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CpuInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CpuInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CpuInfoResponse) GetValues() []*CpuInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type CpuInfo struct {
	CpuUtilization float64 `protobuf:"fixed64,1,opt,name=cpu_utilization" json:"cpu_utilization,omitempty"`
	CpuSystem      float64 `protobuf:"fixed64,2,opt,name=cpu_system" json:"cpu_system,omitempty"`
	CpuIdle        float64 `protobuf:"fixed64,3,opt,name=cpu_idle" json:"cpu_idle,omitempty"`
	CpuIowait      float64 `protobuf:"fixed64,4,opt,name=cpu_iowait" json:"cpu_iowait,omitempty"`
	CpuHintr       float64 `protobuf:"fixed64,5,opt,name=cpu_hintr" json:"cpu_hintr,omitempty"`
	CpuSintr       float64 `protobuf:"fixed64,6,opt,name=cpu_sintr" json:"cpu_sintr,omitempty"`
	CpuUser        float64 `protobuf:"fixed64,7,opt,name=cpu_user" json:"cpu_user,omitempty"`
	CpuNice        float64 `protobuf:"fixed64,8,opt,name=cpu_nice" json:"cpu_nice,omitempty"`
	CpuSteal       float64 `protobuf:"fixed64,9,opt,name=cpu_steal" json:"cpu_steal,omitempty"`
	CpuGuest       float64 `protobuf:"fixed64,10,opt,name=cpu_guest" json:"cpu_guest,omitempty"`
	CpuGuestNice   float64 `protobuf:"fixed64,11,opt,name=cpu_guest_nice" json:"cpu_guest_nice,omitempty"`
	Time           string  `protobuf:"bytes,12,opt,name=time" json:"time,omitempty"`
}

func (m *CpuInfo) Reset()                    { *m = CpuInfo{} }
func (m *CpuInfo) String() string            { return proto.CompactTextString(m) }
func (*CpuInfo) ProtoMessage()               {}
func (*CpuInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CpuInfo) GetCpuUtilization() float64 {
	if m != nil {
		return m.CpuUtilization
	}
	return 0
}

func (m *CpuInfo) GetCpuSystem() float64 {
	if m != nil {
		return m.CpuSystem
	}
	return 0
}

func (m *CpuInfo) GetCpuIdle() float64 {
	if m != nil {
		return m.CpuIdle
	}
	return 0
}

func (m *CpuInfo) GetCpuIowait() float64 {
	if m != nil {
		return m.CpuIowait
	}
	return 0
}

func (m *CpuInfo) GetCpuHintr() float64 {
	if m != nil {
		return m.CpuHintr
	}
	return 0
}

func (m *CpuInfo) GetCpuSintr() float64 {
	if m != nil {
		return m.CpuSintr
	}
	return 0
}

func (m *CpuInfo) GetCpuUser() float64 {
	if m != nil {
		return m.CpuUser
	}
	return 0
}

func (m *CpuInfo) GetCpuNice() float64 {
	if m != nil {
		return m.CpuNice
	}
	return 0
}

func (m *CpuInfo) GetCpuSteal() float64 {
	if m != nil {
		return m.CpuSteal
	}
	return 0
}

func (m *CpuInfo) GetCpuGuest() float64 {
	if m != nil {
		return m.CpuGuest
	}
	return 0
}

func (m *CpuInfo) GetCpuGuestNice() float64 {
	if m != nil {
		return m.CpuGuestNice
	}
	return 0
}

func (m *CpuInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type CpuFreqInfoResponse struct {
	Name   string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags          `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Values []*CpuFreqInfo `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *CpuFreqInfoResponse) Reset()                    { *m = CpuFreqInfoResponse{} }
func (m *CpuFreqInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuFreqInfoResponse) ProtoMessage()               {}
func (*CpuFreqInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CpuFreqInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CpuFreqInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CpuFreqInfoResponse) GetValues() []*CpuFreqInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type CpuFreqInfo struct {
	CpuSpeed float64 `protobuf:"fixed64,1,opt,name=cpu_speed" json:"cpu_speed,omitempty"`
	Time     string  `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
}

func (m *CpuFreqInfo) Reset()                    { *m = CpuFreqInfo{} }
func (m *CpuFreqInfo) String() string            { return proto.CompactTextString(m) }
func (*CpuFreqInfo) ProtoMessage()               {}
func (*CpuFreqInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CpuFreqInfo) GetCpuSpeed() float64 {
	if m != nil {
		return m.CpuSpeed
	}
	return 0
}

func (m *CpuFreqInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type MemoryInfoResponse struct {
	Name   string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags         `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Values []*MemoryInfo `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *MemoryInfoResponse) Reset()                    { *m = MemoryInfoResponse{} }
func (m *MemoryInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*MemoryInfoResponse) ProtoMessage()               {}
func (*MemoryInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MemoryInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemoryInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MemoryInfoResponse) GetValues() []*MemoryInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type MemoryInfo struct {
	MemUtilization float64 `protobuf:"fixed64,1,opt,name=mem_utilization" json:"mem_utilization,omitempty"`
	MemTotal       float64 `protobuf:"fixed64,2,opt,name=mem_total" json:"mem_total,omitempty"`
	MemUsed        float64 `protobuf:"fixed64,3,opt,name=mem_used" json:"mem_used,omitempty"`
	MemFree        float64 `protobuf:"fixed64,4,opt,name=mem_free" json:"mem_free,omitempty"`
	MemShared      float64 `protobuf:"fixed64,5,opt,name=mem_shared" json:"mem_shared,omitempty"`
	MemBuffers     float64 `protobuf:"fixed64,6,opt,name=mem_buffers" json:"mem_buffers,omitempty"`
	MemCached      float64 `protobuf:"fixed64,7,opt,name=mem_cached" json:"mem_cached,omitempty"`
	Time           string  `protobuf:"bytes,8,opt,name=time" json:"time,omitempty"`
}

func (m *MemoryInfo) Reset()                    { *m = MemoryInfo{} }
func (m *MemoryInfo) String() string            { return proto.CompactTextString(m) }
func (*MemoryInfo) ProtoMessage()               {}
func (*MemoryInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *MemoryInfo) GetMemUtilization() float64 {
	if m != nil {
		return m.MemUtilization
	}
	return 0
}

func (m *MemoryInfo) GetMemTotal() float64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *MemoryInfo) GetMemUsed() float64 {
	if m != nil {
		return m.MemUsed
	}
	return 0
}

func (m *MemoryInfo) GetMemFree() float64 {
	if m != nil {
		return m.MemFree
	}
	return 0
}

func (m *MemoryInfo) GetMemShared() float64 {
	if m != nil {
		return m.MemShared
	}
	return 0
}

func (m *MemoryInfo) GetMemBuffers() float64 {
	if m != nil {
		return m.MemBuffers
	}
	return 0
}

func (m *MemoryInfo) GetMemCached() float64 {
	if m != nil {
		return m.MemCached
	}
	return 0
}

func (m *MemoryInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type DiskInfoResponse struct {
	Name   string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags       `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Values []*DiskInfo `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *DiskInfoResponse) Reset()                    { *m = DiskInfoResponse{} }
func (m *DiskInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*DiskInfoResponse) ProtoMessage()               {}
func (*DiskInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DiskInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiskInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *DiskInfoResponse) GetValues() []*DiskInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type DiskInfo struct {
	Free        float64 `protobuf:"fixed64,1,opt,name=free" json:"free,omitempty"`
	ReadBytes   float64 `protobuf:"fixed64,2,opt,name=read_bytes" json:"read_bytes,omitempty"`
	ReadTime    float64 `protobuf:"fixed64,3,opt,name=read_time" json:"read_time,omitempty"`
	Reads       float64 `protobuf:"fixed64,4,opt,name=reads" json:"reads,omitempty"`
	Total       float64 `protobuf:"fixed64,5,opt,name=total" json:"total,omitempty"`
	Used        float64 `protobuf:"fixed64,6,opt,name=used" json:"used,omitempty"`
	UsedPercent float64 `protobuf:"fixed64,7,opt,name=used_percent" json:"used_percent,omitempty"`
	WriteBytes  float64 `protobuf:"fixed64,8,opt,name=write_bytes" json:"write_bytes,omitempty"`
	WriteTime   float64 `protobuf:"fixed64,9,opt,name=write_time" json:"write_time,omitempty"`
	Writes      float64 `protobuf:"fixed64,10,opt,name=writes" json:"writes,omitempty"`
	Time        string  `protobuf:"bytes,11,opt,name=time" json:"time,omitempty"`
}

func (m *DiskInfo) Reset()                    { *m = DiskInfo{} }
func (m *DiskInfo) String() string            { return proto.CompactTextString(m) }
func (*DiskInfo) ProtoMessage()               {}
func (*DiskInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DiskInfo) GetFree() float64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *DiskInfo) GetReadBytes() float64 {
	if m != nil {
		return m.ReadBytes
	}
	return 0
}

func (m *DiskInfo) GetReadTime() float64 {
	if m != nil {
		return m.ReadTime
	}
	return 0
}

func (m *DiskInfo) GetReads() float64 {
	if m != nil {
		return m.Reads
	}
	return 0
}

func (m *DiskInfo) GetTotal() float64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DiskInfo) GetUsed() float64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *DiskInfo) GetUsedPercent() float64 {
	if m != nil {
		return m.UsedPercent
	}
	return 0
}

func (m *DiskInfo) GetWriteBytes() float64 {
	if m != nil {
		return m.WriteBytes
	}
	return 0
}

func (m *DiskInfo) GetWriteTime() float64 {
	if m != nil {
		return m.WriteTime
	}
	return 0
}

func (m *DiskInfo) GetWrites() float64 {
	if m != nil {
		return m.Writes
	}
	return 0
}

func (m *DiskInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type NetworkInfoResponse struct {
	Name   string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   *Tags          `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	Values []*NetworkInfo `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *NetworkInfoResponse) Reset()                    { *m = NetworkInfoResponse{} }
func (m *NetworkInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfoResponse) ProtoMessage()               {}
func (*NetworkInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *NetworkInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkInfoResponse) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NetworkInfoResponse) GetValues() []*NetworkInfo {
	if m != nil {
		return m.Values
	}
	return nil
}

type NetworkInfo struct {
	BytesIn  float64 `protobuf:"fixed64,1,opt,name=bytes_in" json:"bytes_in,omitempty"`
	BytesOut float64 `protobuf:"fixed64,2,opt,name=bytes_out" json:"bytes_out,omitempty"`
	PktsIn   float64 `protobuf:"fixed64,3,opt,name=pkts_in" json:"pkts_in,omitempty"`
	PktsOut  float64 `protobuf:"fixed64,4,opt,name=pkts_out" json:"pkts_out,omitempty"`
	Time     string  `protobuf:"bytes,5,opt,name=time" json:"time,omitempty"`
}

func (m *NetworkInfo) Reset()                    { *m = NetworkInfo{} }
func (m *NetworkInfo) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfo) ProtoMessage()               {}
func (*NetworkInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *NetworkInfo) GetBytesIn() float64 {
	if m != nil {
		return m.BytesIn
	}
	return 0
}

func (m *NetworkInfo) GetBytesOut() float64 {
	if m != nil {
		return m.BytesOut
	}
	return 0
}

func (m *NetworkInfo) GetPktsIn() float64 {
	if m != nil {
		return m.PktsIn
	}
	return 0
}

func (m *NetworkInfo) GetPktsOut() float64 {
	if m != nil {
		return m.PktsOut
	}
	return 0
}

func (m *NetworkInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type MonitoringConfigRequest struct {
	Item *MonitoringConfigInfo `protobuf:"bytes,1,opt,name=item,json=common" json:"item,omitempty"`
}

func (m *MonitoringConfigRequest) Reset()                    { *m = MonitoringConfigRequest{} }
func (m *MonitoringConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*MonitoringConfigRequest) ProtoMessage()               {}
func (*MonitoringConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *MonitoringConfigRequest) GetItem() *MonitoringConfigInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type MonitoringConfigResponse struct {
	Item *MonitoringConfigInfo `protobuf:"bytes,1,opt,name=item,json=common" json:"item,omitempty"`
}

func (m *MonitoringConfigResponse) Reset()                    { *m = MonitoringConfigResponse{} }
func (m *MonitoringConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*MonitoringConfigResponse) ProtoMessage()               {}
func (*MonitoringConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *MonitoringConfigResponse) GetItem() *MonitoringConfigInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type MonitoringConfigInfo struct {
	// 	MCISAgentInterval
	McisAgentInterval int32 `protobuf:"varint,1,opt,name=mcis_agent_interval" json:"mcis_agent_interval,omitempty"`
	// 	MCISCollectorInterval
	McisCollectorInterval int32  `protobuf:"varint,2,opt,name=mcis_collector_interval" json:"mcis_collector_interval,omitempty"`
	MaxHostCount          int32  `protobuf:"varint,3,opt,name=max_host_count" json:"max_host_count,omitempty"`
	MonitoringPolicy      string `protobuf:"bytes,4,opt,name=monitoring_policy" json:"monitoring_policy,omitempty"`
}

func (m *MonitoringConfigInfo) Reset()                    { *m = MonitoringConfigInfo{} }
func (m *MonitoringConfigInfo) String() string            { return proto.CompactTextString(m) }
func (*MonitoringConfigInfo) ProtoMessage()               {}
func (*MonitoringConfigInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *MonitoringConfigInfo) GetMcisAgentInterval() int32 {
	if m != nil {
		return m.McisAgentInterval
	}
	return 0
}

func (m *MonitoringConfigInfo) GetMcisCollectorInterval() int32 {
	if m != nil {
		return m.McisCollectorInterval
	}
	return 0
}

func (m *MonitoringConfigInfo) GetMaxHostCount() int32 {
	if m != nil {
		return m.MaxHostCount
	}
	return 0
}

func (m *MonitoringConfigInfo) GetMonitoringPolicy() string {
	if m != nil {
		return m.MonitoringPolicy
	}
	return ""
}

type InstallAgentRequest struct {
	NsId         string `protobuf:"bytes,1,opt,name=ns_id" json:"ns_id,omitempty"`
	McisId       string `protobuf:"bytes,2,opt,name=mcis_id" json:"mcis_id,omitempty"`
	VmId         string `protobuf:"bytes,3,opt,name=vm_id" json:"vm_id,omitempty"`
	PublicIp     string `protobuf:"bytes,4,opt,name=public_ip" json:"public_ip,omitempty"`
	UserName     string `protobuf:"bytes,5,opt,name=user_name" json:"user_name,omitempty"`
	SshKey       string `protobuf:"bytes,6,opt,name=ssh_key" json:"ssh_key,omitempty"`
	CspType      string `protobuf:"bytes,7,opt,name=csp_type" json:"csp_type,omitempty"`
	Port         string `protobuf:"bytes,8,opt,name=port" json:"port,omitempty"`
	ServiceType  string `protobuf:"bytes,9,opt,name=service_type" json:"service_type,omitempty"`
	Mck8SId      string `protobuf:"bytes,10,opt,name=mck8s_id" json:"mck8s_id,omitempty"`
	ApiserverUrl string `protobuf:"bytes,11,opt,name=apiserver_url" json:"apiserver_url,omitempty"`
	ServerCa     string `protobuf:"bytes,12,opt,name=server_ca" json:"server_ca,omitempty"`
	ClientCa     string `protobuf:"bytes,13,opt,name=client_ca" json:"client_ca,omitempty"`
	ClientKey    string `protobuf:"bytes,14,opt,name=client_key" json:"client_key,omitempty"`
	ClientToken  string `protobuf:"bytes,15,opt,name=client_token" json:"client_token,omitempty"`
}

func (m *InstallAgentRequest) Reset()                    { *m = InstallAgentRequest{} }
func (m *InstallAgentRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallAgentRequest) ProtoMessage()               {}
func (*InstallAgentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *InstallAgentRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *InstallAgentRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *InstallAgentRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *InstallAgentRequest) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *InstallAgentRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *InstallAgentRequest) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *InstallAgentRequest) GetCspType() string {
	if m != nil {
		return m.CspType
	}
	return ""
}

func (m *InstallAgentRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *InstallAgentRequest) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *InstallAgentRequest) GetMck8SId() string {
	if m != nil {
		return m.Mck8SId
	}
	return ""
}

func (m *InstallAgentRequest) GetApiserverUrl() string {
	if m != nil {
		return m.ApiserverUrl
	}
	return ""
}

func (m *InstallAgentRequest) GetServerCa() string {
	if m != nil {
		return m.ServerCa
	}
	return ""
}

func (m *InstallAgentRequest) GetClientCa() string {
	if m != nil {
		return m.ClientCa
	}
	return ""
}

func (m *InstallAgentRequest) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

func (m *InstallAgentRequest) GetClientToken() string {
	if m != nil {
		return m.ClientToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "cbdragonfly.Empty")
	proto.RegisterType((*MessageResponse)(nil), "cbdragonfly.MessageResponse")
	proto.RegisterType((*Tags)(nil), "cbdragonfly.Tags")
	proto.RegisterType((*VMMonQryRequest)(nil), "cbdragonfly.VMMonQryRequest")
	proto.RegisterType((*VMOnDemandMonQryRequest)(nil), "cbdragonfly.VMOnDemandMonQryRequest")
	proto.RegisterType((*VMMCISMonQryRequest)(nil), "cbdragonfly.VMMCISMonQryRequest")
	proto.RegisterType((*CpuOnDemandInfoResponse)(nil), "cbdragonfly.CpuOnDemandInfoResponse")
	proto.RegisterType((*CpuOnDemandInfo)(nil), "cbdragonfly.CpuOnDemandInfo")
	proto.RegisterType((*CpuFreqOnDemandInfoResponse)(nil), "cbdragonfly.CpuFreqOnDemandInfoResponse")
	proto.RegisterType((*CpuFreqOnDemandInfo)(nil), "cbdragonfly.CpuFreqOnDemandInfo")
	proto.RegisterType((*MemoryOnDemandInfoResponse)(nil), "cbdragonfly.MemoryOnDemandInfoResponse")
	proto.RegisterType((*MemoryOnDemandInfo)(nil), "cbdragonfly.MemoryOnDemandInfo")
	proto.RegisterType((*DiskOnDemandInfoResponse)(nil), "cbdragonfly.DiskOnDemandInfoResponse")
	proto.RegisterType((*DiskOnDemandInfo)(nil), "cbdragonfly.DiskOnDemandInfo")
	proto.RegisterType((*NetworkOnDemandInfoResponse)(nil), "cbdragonfly.NetworkOnDemandInfoResponse")
	proto.RegisterType((*NetworkOnDemandInfo)(nil), "cbdragonfly.NetworkOnDemandInfo")
	proto.RegisterType((*MCISMonInfoResponse)(nil), "cbdragonfly.MCISMonInfoResponse")
	proto.RegisterType((*CpuInfoResponse)(nil), "cbdragonfly.CpuInfoResponse")
	proto.RegisterType((*CpuInfo)(nil), "cbdragonfly.CpuInfo")
	proto.RegisterType((*CpuFreqInfoResponse)(nil), "cbdragonfly.CpuFreqInfoResponse")
	proto.RegisterType((*CpuFreqInfo)(nil), "cbdragonfly.CpuFreqInfo")
	proto.RegisterType((*MemoryInfoResponse)(nil), "cbdragonfly.MemoryInfoResponse")
	proto.RegisterType((*MemoryInfo)(nil), "cbdragonfly.MemoryInfo")
	proto.RegisterType((*DiskInfoResponse)(nil), "cbdragonfly.DiskInfoResponse")
	proto.RegisterType((*DiskInfo)(nil), "cbdragonfly.DiskInfo")
	proto.RegisterType((*NetworkInfoResponse)(nil), "cbdragonfly.NetworkInfoResponse")
	proto.RegisterType((*NetworkInfo)(nil), "cbdragonfly.NetworkInfo")
	proto.RegisterType((*MonitoringConfigRequest)(nil), "cbdragonfly.MonitoringConfigRequest")
	proto.RegisterType((*MonitoringConfigResponse)(nil), "cbdragonfly.MonitoringConfigResponse")
	proto.RegisterType((*MonitoringConfigInfo)(nil), "cbdragonfly.MonitoringConfigInfo")
	proto.RegisterType((*InstallAgentRequest)(nil), "cbdragonfly.InstallAgentRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MON service

type MONClient interface {
	// TODO: MCIS 모니터링 조회
	GetMCISMonInfo(ctx context.Context, in *VMMCISMonQryRequest, opts ...grpc.CallOption) (*MCISMonInfoResponse, error)
	// VM 온디멘드 모니터링 조회
	GetVMOnDemandMonCpuInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*CpuOnDemandInfoResponse, error)
	GetVMOnDemandMonCpuFreqInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*CpuFreqOnDemandInfoResponse, error)
	GetVMOnDemandMonMemoryInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*MemoryOnDemandInfoResponse, error)
	GetVMOnDemandMonDiskInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*DiskOnDemandInfoResponse, error)
	GetVMOnDemandMonNetworkInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*NetworkOnDemandInfoResponse, error)
	// VM 모니터링 조회
	GetVMMonCpuInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*CpuInfoResponse, error)
	GetVMMonCpuFreqInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*CpuFreqInfoResponse, error)
	GetVMMonMemoryInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*MemoryInfoResponse, error)
	GetVMMonDiskInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*DiskInfoResponse, error)
	GetVMMonNetworkInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*NetworkInfoResponse, error)
	SetMonConfig(ctx context.Context, in *MonitoringConfigRequest, opts ...grpc.CallOption) (*MonitoringConfigResponse, error)
	GetMonConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitoringConfigResponse, error)
	ResetMonConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitoringConfigResponse, error)
	InstallAgent(ctx context.Context, in *InstallAgentRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type mONClient struct {
	cc *grpc.ClientConn
}

func NewMONClient(cc *grpc.ClientConn) MONClient {
	return &mONClient{cc}
}

func (c *mONClient) GetMCISMonInfo(ctx context.Context, in *VMMCISMonQryRequest, opts ...grpc.CallOption) (*MCISMonInfoResponse, error) {
	out := new(MCISMonInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetMCISMonInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMOnDemandMonCpuInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*CpuOnDemandInfoResponse, error) {
	out := new(CpuOnDemandInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMOnDemandMonCpuInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMOnDemandMonCpuFreqInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*CpuFreqOnDemandInfoResponse, error) {
	out := new(CpuFreqOnDemandInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMOnDemandMonCpuFreqInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMOnDemandMonMemoryInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*MemoryOnDemandInfoResponse, error) {
	out := new(MemoryOnDemandInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMOnDemandMonMemoryInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMOnDemandMonDiskInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*DiskOnDemandInfoResponse, error) {
	out := new(DiskOnDemandInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMOnDemandMonDiskInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMOnDemandMonNetworkInfo(ctx context.Context, in *VMOnDemandMonQryRequest, opts ...grpc.CallOption) (*NetworkOnDemandInfoResponse, error) {
	out := new(NetworkOnDemandInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMOnDemandMonNetworkInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMMonCpuInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*CpuInfoResponse, error) {
	out := new(CpuInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMMonCpuInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMMonCpuFreqInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*CpuFreqInfoResponse, error) {
	out := new(CpuFreqInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMMonCpuFreqInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMMonMemoryInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*MemoryInfoResponse, error) {
	out := new(MemoryInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMMonMemoryInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMMonDiskInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*DiskInfoResponse, error) {
	out := new(DiskInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMMonDiskInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetVMMonNetworkInfo(ctx context.Context, in *VMMonQryRequest, opts ...grpc.CallOption) (*NetworkInfoResponse, error) {
	out := new(NetworkInfoResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetVMMonNetworkInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) SetMonConfig(ctx context.Context, in *MonitoringConfigRequest, opts ...grpc.CallOption) (*MonitoringConfigResponse, error) {
	out := new(MonitoringConfigResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/SetMonConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) GetMonConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitoringConfigResponse, error) {
	out := new(MonitoringConfigResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/GetMonConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) ResetMonConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitoringConfigResponse, error) {
	out := new(MonitoringConfigResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/ResetMonConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mONClient) InstallAgent(ctx context.Context, in *InstallAgentRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := grpc.Invoke(ctx, "/cbdragonfly.MON/InstallAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MON service

type MONServer interface {
	// TODO: MCIS 모니터링 조회
	GetMCISMonInfo(context.Context, *VMMCISMonQryRequest) (*MCISMonInfoResponse, error)
	// VM 온디멘드 모니터링 조회
	GetVMOnDemandMonCpuInfo(context.Context, *VMOnDemandMonQryRequest) (*CpuOnDemandInfoResponse, error)
	GetVMOnDemandMonCpuFreqInfo(context.Context, *VMOnDemandMonQryRequest) (*CpuFreqOnDemandInfoResponse, error)
	GetVMOnDemandMonMemoryInfo(context.Context, *VMOnDemandMonQryRequest) (*MemoryOnDemandInfoResponse, error)
	GetVMOnDemandMonDiskInfo(context.Context, *VMOnDemandMonQryRequest) (*DiskOnDemandInfoResponse, error)
	GetVMOnDemandMonNetworkInfo(context.Context, *VMOnDemandMonQryRequest) (*NetworkOnDemandInfoResponse, error)
	// VM 모니터링 조회
	GetVMMonCpuInfo(context.Context, *VMMonQryRequest) (*CpuInfoResponse, error)
	GetVMMonCpuFreqInfo(context.Context, *VMMonQryRequest) (*CpuFreqInfoResponse, error)
	GetVMMonMemoryInfo(context.Context, *VMMonQryRequest) (*MemoryInfoResponse, error)
	GetVMMonDiskInfo(context.Context, *VMMonQryRequest) (*DiskInfoResponse, error)
	GetVMMonNetworkInfo(context.Context, *VMMonQryRequest) (*NetworkInfoResponse, error)
	SetMonConfig(context.Context, *MonitoringConfigRequest) (*MonitoringConfigResponse, error)
	GetMonConfig(context.Context, *Empty) (*MonitoringConfigResponse, error)
	ResetMonConfig(context.Context, *Empty) (*MonitoringConfigResponse, error)
	InstallAgent(context.Context, *InstallAgentRequest) (*MessageResponse, error)
}

func RegisterMONServer(s *grpc.Server, srv MONServer) {
	s.RegisterService(&_MON_serviceDesc, srv)
}

func _MON_GetMCISMonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMMCISMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetMCISMonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetMCISMonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetMCISMonInfo(ctx, req.(*VMMCISMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMOnDemandMonCpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMOnDemandMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMOnDemandMonCpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMOnDemandMonCpuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMOnDemandMonCpuInfo(ctx, req.(*VMOnDemandMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMOnDemandMonCpuFreqInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMOnDemandMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMOnDemandMonCpuFreqInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMOnDemandMonCpuFreqInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMOnDemandMonCpuFreqInfo(ctx, req.(*VMOnDemandMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMOnDemandMonMemoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMOnDemandMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMOnDemandMonMemoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMOnDemandMonMemoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMOnDemandMonMemoryInfo(ctx, req.(*VMOnDemandMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMOnDemandMonDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMOnDemandMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMOnDemandMonDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMOnDemandMonDiskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMOnDemandMonDiskInfo(ctx, req.(*VMOnDemandMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMOnDemandMonNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMOnDemandMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMOnDemandMonNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMOnDemandMonNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMOnDemandMonNetworkInfo(ctx, req.(*VMOnDemandMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMMonCpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMMonCpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMMonCpuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMMonCpuInfo(ctx, req.(*VMMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMMonCpuFreqInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMMonCpuFreqInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMMonCpuFreqInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMMonCpuFreqInfo(ctx, req.(*VMMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMMonMemoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMMonMemoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMMonMemoryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMMonMemoryInfo(ctx, req.(*VMMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMMonDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMMonDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMMonDiskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMMonDiskInfo(ctx, req.(*VMMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetVMMonNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMMonQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetVMMonNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetVMMonNetworkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetVMMonNetworkInfo(ctx, req.(*VMMonQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_SetMonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).SetMonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/SetMonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).SetMonConfig(ctx, req.(*MonitoringConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_GetMonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).GetMonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/GetMonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).GetMonConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_ResetMonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).ResetMonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/ResetMonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).ResetMonConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MON_InstallAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MONServer).InstallAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbdragonfly.MON/InstallAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MONServer).InstallAgent(ctx, req.(*InstallAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MON_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbdragonfly.MON",
	HandlerType: (*MONServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMCISMonInfo",
			Handler:    _MON_GetMCISMonInfo_Handler,
		},
		{
			MethodName: "GetVMOnDemandMonCpuInfo",
			Handler:    _MON_GetVMOnDemandMonCpuInfo_Handler,
		},
		{
			MethodName: "GetVMOnDemandMonCpuFreqInfo",
			Handler:    _MON_GetVMOnDemandMonCpuFreqInfo_Handler,
		},
		{
			MethodName: "GetVMOnDemandMonMemoryInfo",
			Handler:    _MON_GetVMOnDemandMonMemoryInfo_Handler,
		},
		{
			MethodName: "GetVMOnDemandMonDiskInfo",
			Handler:    _MON_GetVMOnDemandMonDiskInfo_Handler,
		},
		{
			MethodName: "GetVMOnDemandMonNetworkInfo",
			Handler:    _MON_GetVMOnDemandMonNetworkInfo_Handler,
		},
		{
			MethodName: "GetVMMonCpuInfo",
			Handler:    _MON_GetVMMonCpuInfo_Handler,
		},
		{
			MethodName: "GetVMMonCpuFreqInfo",
			Handler:    _MON_GetVMMonCpuFreqInfo_Handler,
		},
		{
			MethodName: "GetVMMonMemoryInfo",
			Handler:    _MON_GetVMMonMemoryInfo_Handler,
		},
		{
			MethodName: "GetVMMonDiskInfo",
			Handler:    _MON_GetVMMonDiskInfo_Handler,
		},
		{
			MethodName: "GetVMMonNetworkInfo",
			Handler:    _MON_GetVMMonNetworkInfo_Handler,
		},
		{
			MethodName: "SetMonConfig",
			Handler:    _MON_SetMonConfig_Handler,
		},
		{
			MethodName: "GetMonConfig",
			Handler:    _MON_GetMonConfig_Handler,
		},
		{
			MethodName: "ResetMonConfig",
			Handler:    _MON_ResetMonConfig_Handler,
		},
		{
			MethodName: "InstallAgent",
			Handler:    _MON_InstallAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbdragonfly/cbdragonfly.proto",
}

func init() { proto.RegisterFile("cbdragonfly/cbdragonfly.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x8f, 0x1b, 0x59,
	0x11, 0x8f, 0x3d, 0xe3, 0xf9, 0x78, 0x9e, 0xcd, 0x24, 0x3d, 0x59, 0xc6, 0x3b, 0x49, 0xe8, 0xec,
	0x63, 0x57, 0x1b, 0xb4, 0xb0, 0x11, 0xc9, 0x22, 0x10, 0x2b, 0x88, 0xc8, 0x04, 0xa2, 0x2c, 0x78,
	0x43, 0x5e, 0xb2, 0xd9, 0x03, 0x42, 0x56, 0x4f, 0xfb, 0x8d, 0xd3, 0x1a, 0xbb, 0xbb, 0xb7, 0xbb,
	0x9d, 0x60, 0xb8, 0x22, 0x04, 0x12, 0xe2, 0xc2, 0x85, 0x23, 0x57, 0x2e, 0x7b, 0xe0, 0xc0, 0x5f,
	0xc0, 0x05, 0x71, 0x40, 0x5c, 0x38, 0xf6, 0x1f, 0xe0, 0x1b, 0xbe, 0xc2, 0x01, 0x55, 0xbd, 0x8f,
	0x7a, 0xdd, 0xf6, 0xcc, 0x3a, 0x7c, 0x28, 0x0c, 0xc9, 0xc9, 0xaf, 0x7e, 0xf5, 0xaa, 0xea, 0x75,
	0x55, 0xbd, 0x7a, 0xaf, 0xda, 0xcd, 0x2e, 0x87, 0x07, 0xfd, 0x2c, 0x18, 0x24, 0xf1, 0xe1, 0x70,
	0x72, 0xcd, 0x19, 0xbf, 0x93, 0x66, 0x49, 0x91, 0x78, 0x6d, 0x07, 0xda, 0xbb, 0x30, 0x48, 0x06,
	0x09, 0xe2, 0xd7, 0x60, 0xa4, 0xa6, 0xf0, 0x75, 0xd6, 0xfa, 0xd6, 0x28, 0x2d, 0x26, 0xfc, 0x7d,
	0xb6, 0xdd, 0x95, 0x79, 0x1e, 0x0c, 0xa4, 0x90, 0x79, 0x9a, 0xc4, 0xb9, 0xf4, 0xbe, 0xc2, 0xd6,
	0x47, 0x0a, 0xea, 0x34, 0xae, 0x34, 0xae, 0x6e, 0xde, 0xba, 0x3c, 0x2d, 0x7d, 0x03, 0xcd, 0x4a,
	0xff, 0xec, 0x24, 0x18, 0x0d, 0xbf, 0xc6, 0x35, 0xc0, 0x85, 0x61, 0xf1, 0x5f, 0x37, 0xd8, 0xea,
	0xc3, 0x60, 0x90, 0x7b, 0x5f, 0x60, 0xad, 0x38, 0xef, 0x45, 0x7d, 0x2d, 0xbf, 0x3b, 0x2d, 0xfd,
	0xd5, 0x38, 0xbf, 0xdb, 0x9f, 0x95, 0x7e, 0x5b, 0x09, 0x03, 0xc5, 0x05, 0x82, 0xde, 0xbb, 0x6c,
	0x7d, 0x14, 0x46, 0x38, 0xbf, 0x89, 0xf3, 0x2f, 0x4e, 0x4b, 0x7f, 0x0d, 0x20, 0x94, 0x78, 0x45,
	0x9b, 0x43, 0x9a, 0x0b, 0xcd, 0x00, 0x1b, 0x4f, 0x46, 0x20, 0xb3, 0x42, 0x36, 0x9e, 0x8c, 0x5c,
	0x1b, 0x40, 0x71, 0x81, 0x20, 0xff, 0xeb, 0x0a, 0xdb, 0x7e, 0xd4, 0xed, 0x26, 0xf1, 0xfd, 0x6c,
	0x22, 0xe4, 0xc7, 0x63, 0x99, 0x17, 0xde, 0xb5, 0xea, 0x2a, 0x5f, 0x9b, 0x96, 0xbe, 0x02, 0x66,
	0xa5, 0xbf, 0x65, 0x96, 0xd9, 0x8b, 0xfa, 0x5c, 0x28, 0x18, 0x1d, 0x53, 0x59, 0xa8, 0x72, 0x8c,
	0x82, 0x1c, 0xc7, 0x28, 0x00, 0x1c, 0xa3, 0x46, 0x60, 0xc9, 0x5d, 0x2b, 0x5a, 0x42, 0x80, 0x2c,
	0x21, 0xc9, 0x85, 0x82, 0xbd, 0xdb, 0xac, 0x9d, 0xca, 0x2c, 0x4a, 0xfa, 0xbd, 0x62, 0x92, 0xca,
	0xce, 0x2a, 0x8a, 0x7d, 0x6e, 0x5a, 0xfa, 0x4c, 0xc1, 0x0f, 0x27, 0x29, 0x44, 0xe2, 0xbc, 0x92,
	0x25, 0x8c, 0x0b, 0x67, 0x82, 0xd7, 0x67, 0x3b, 0x79, 0x11, 0x14, 0x51, 0x5e, 0x44, 0x61, 0xde,
	0x0b, 0xb3, 0xa8, 0x90, 0x59, 0x14, 0x74, 0x5a, 0xa8, 0xed, 0xc6, 0xb4, 0xf4, 0x3d, 0x62, 0xef,
	0x6b, 0xee, 0xac, 0xf4, 0x5f, 0x53, 0x5a, 0xe7, 0x79, 0x5c, 0x2c, 0x10, 0xf0, 0xde, 0x63, 0x1b,
	0xfd, 0x71, 0x16, 0x14, 0x51, 0x12, 0x77, 0xd6, 0x50, 0xb5, 0x3f, 0x2d, 0x7d, 0x8b, 0xcd, 0x4a,
	0x7f, 0x5b, 0x29, 0x34, 0x08, 0x17, 0x96, 0xe9, 0xdd, 0x64, 0x5b, 0xb9, 0xcc, 0x9e, 0x44, 0xa1,
	0x54, 0x4f, 0xba, 0xfe, 0x8c, 0x0a, 0xf8, 0xdf, 0x1a, 0x6c, 0xf7, 0x51, 0xf7, 0x5e, 0x7c, 0x5b,
	0x8e, 0x82, 0xb8, 0x7f, 0x6a, 0x02, 0xfc, 0x1e, 0xdb, 0x08, 0x06, 0x32, 0x2e, 0x7a, 0x51, 0xaa,
	0xa3, 0x8b, 0xcf, 0x6c, 0x30, 0x7a, 0x66, 0x83, 0x70, 0x61, 0x99, 0xfc, 0xf7, 0x4d, 0xb6, 0xf3,
	0xa8, 0xdb, 0xdd, 0xbf, 0xfb, 0xe0, 0x85, 0x78, 0x5e, 0xef, 0x0e, 0x6b, 0x8f, 0x64, 0x91, 0x45,
	0x61, 0x2f, 0x0e, 0x46, 0x52, 0xe7, 0xef, 0x9b, 0xd3, 0xd2, 0x77, 0xe1, 0x59, 0xe9, 0x7b, 0xa6,
	0x30, 0x59, 0x90, 0x0b, 0x77, 0x0a, 0xff, 0x69, 0x93, 0xed, 0xee, 0xa7, 0x63, 0x93, 0x2d, 0x77,
	0xe3, 0xc3, 0xc4, 0x56, 0xbd, 0xb7, 0xd9, 0x2a, 0x6a, 0x77, 0x4b, 0x96, 0x52, 0x6b, 0x4a, 0x16,
	0xea, 0x43, 0xd0, 0xfb, 0x06, 0x5b, 0x2d, 0x82, 0x41, 0x8e, 0x5e, 0x6b, 0x5f, 0x3f, 0xff, 0x8e,
	0x5b, 0x83, 0xa1, 0x02, 0x2a, 0x79, 0x98, 0x42, 0xf2, 0x40, 0x71, 0x81, 0x20, 0x18, 0x2b, 0xa2,
	0x91, 0x74, 0x6b, 0x17, 0xd0, 0xce, 0xe4, 0x08, 0x8d, 0xc1, 0x8f, 0x77, 0x9f, 0xad, 0x3d, 0x09,
	0x86, 0x63, 0x99, 0xa3, 0xe7, 0xda, 0xd7, 0x2f, 0x55, 0xcc, 0xd5, 0x9e, 0x47, 0x15, 0x4f, 0x35,
	0x9f, 0x8a, 0xa7, 0xa2, 0xb9, 0xd0, 0x0c, 0xfe, 0x93, 0x35, 0xb6, 0x5d, 0x13, 0xf4, 0x3e, 0x62,
	0xdb, 0x61, 0x3a, 0xee, 0x8d, 0x8b, 0x68, 0x18, 0xfd, 0x48, 0x6d, 0x67, 0xf0, 0x45, 0xe3, 0xd6,
	0x17, 0xa7, 0xa5, 0x5f, 0x67, 0xcd, 0x4a, 0xff, 0x33, 0x4a, 0x75, 0x8d, 0xc1, 0x45, 0x7d, 0xaa,
	0xb7, 0xcf, 0x18, 0x40, 0xf9, 0x24, 0x2f, 0xe4, 0x08, 0x5d, 0xd6, 0x50, 0xb5, 0x8c, 0x50, 0xaa,
	0x65, 0x84, 0x71, 0xe1, 0x4c, 0x80, 0x04, 0x02, 0x2a, 0xea, 0x0f, 0x95, 0xd7, 0x1a, 0x2a, 0x81,
	0x0c, 0x46, 0x09, 0x64, 0x10, 0x2e, 0x2c, 0xd3, 0xac, 0x20, 0x4a, 0x9e, 0x06, 0x51, 0x81, 0x5e,
	0x74, 0x56, 0xa0, 0xd0, 0xea, 0x0a, 0x14, 0xa6, 0x57, 0xa0, 0x08, 0xef, 0x26, 0xdb, 0x04, 0xea,
	0x71, 0x14, 0x17, 0x19, 0xe6, 0x60, 0xe3, 0xd6, 0xeb, 0xd3, 0xd2, 0x27, 0x70, 0x56, 0xfa, 0xe7,
	0x48, 0x05, 0x42, 0x5c, 0x10, 0xdb, 0x28, 0xc8, 0x51, 0xc1, 0x5a, 0x55, 0x41, 0x3e, 0xaf, 0x20,
	0x77, 0x14, 0xe0, 0xd8, 0xf8, 0x60, 0x9c, 0xcb, 0x0c, 0x0b, 0xa5, 0xe3, 0x03, 0xc0, 0xaa, 0x3e,
	0x00, 0x44, 0xfb, 0x00, 0x86, 0x46, 0x38, 0x8e, 0x42, 0xd9, 0xd9, 0xa8, 0x0a, 0x03, 0x56, 0x15,
	0x06, 0x44, 0x0b, 0xc3, 0xd0, 0x2e, 0xbd, 0x90, 0xc1, 0xb0, 0xb3, 0x59, 0x5b, 0x3a, 0x80, 0xb5,
	0xa5, 0x03, 0x64, 0x96, 0x0e, 0x63, 0xa3, 0x60, 0x00, 0x75, 0xaa, 0xc3, 0xaa, 0x0a, 0x10, 0xac,
	0x2a, 0x40, 0x48, 0x2b, 0xc0, 0xb1, 0xf7, 0x80, 0x9d, 0xb5, 0x84, 0x7a, 0x88, 0x36, 0x6a, 0x79,
	0x7b, 0x5a, 0xfa, 0x35, 0xce, 0xac, 0xf4, 0x5f, 0xad, 0xa9, 0xd2, 0x0f, 0x54, 0x9b, 0xc8, 0x7f,
	0xd9, 0x64, 0x17, 0xf7, 0xd3, 0xf1, 0xb7, 0x33, 0xf9, 0xf1, 0x29, 0xab, 0x09, 0x1f, 0xd6, 0x6a,
	0xc2, 0x95, 0x7a, 0x4d, 0xa8, 0x3f, 0xd3, 0x72, 0x75, 0xe1, 0x11, 0xdb, 0x59, 0x20, 0x6b, 0xc3,
	0x9f, 0x4a, 0xd9, 0xd7, 0x45, 0x81, 0xc2, 0x0f, 0x60, 0x2d, 0xfc, 0x00, 0x99, 0xf0, 0xe3, 0xf8,
	0x17, 0x4d, 0xb6, 0xd7, 0x95, 0xa3, 0x24, 0x9b, 0x9c, 0x32, 0x3f, 0x3f, 0xac, 0xf9, 0xd9, 0xaf,
	0x98, 0x9b, 0x7f, 0xa4, 0xe5, 0xdc, 0xfc, 0xf7, 0x15, 0xe6, 0xcd, 0xcb, 0x42, 0x05, 0x1e, 0xc9,
	0xd1, 0x71, 0x15, 0xb8, 0xc6, 0xa2, 0x0a, 0x5c, 0x63, 0x70, 0x51, 0x9f, 0x0a, 0xf1, 0x03, 0xa8,
	0x48, 0x8a, 0x60, 0xa8, 0x0b, 0x30, 0xc6, 0xcf, 0x82, 0x14, 0x3f, 0x0b, 0x71, 0x41, 0x6c, 0x28,
	0x1e, 0xa8, 0x33, 0x97, 0x7d, 0xb7, 0xfa, 0x1a, 0x8c, 0x8a, 0x87, 0x41, 0xb8, 0xb0, 0x4c, 0x23,
	0x7c, 0x98, 0x49, 0xa9, 0x6b, 0xaf, 0x15, 0x06, 0xac, 0x2a, 0x0c, 0x88, 0x16, 0x86, 0x21, 0x94,
	0x6e, 0x18, 0xe7, 0x8f, 0x83, 0x4c, 0xf6, 0x75, 0xd9, 0xc5, 0xd2, 0x4d, 0x28, 0x95, 0x6e, 0xc2,
	0xb8, 0x70, 0x26, 0xa8, 0x0b, 0xc4, 0xa8, 0x77, 0x30, 0x3e, 0x3c, 0x94, 0x59, 0xae, 0x6b, 0xaf,
	0xbe, 0x40, 0x58, 0xd8, 0xbd, 0x40, 0x58, 0x10, 0x2f, 0x10, 0x96, 0x32, 0xab, 0x09, 0x83, 0xf0,
	0xb1, 0xec, 0xeb, 0x1a, 0x6c, 0x57, 0xa3, 0xd0, 0xea, 0x6a, 0x14, 0xa6, 0x57, 0xa3, 0x89, 0x9f,
	0x35, 0x59, 0xe7, 0x76, 0x94, 0x1f, 0x9d, 0xb2, 0xad, 0x20, 0x6a, 0x5b, 0xe1, 0x72, 0xc5, 0x5c,
	0xfd, 0x81, 0x96, 0xdb, 0x08, 0xbf, 0x5b, 0x65, 0xe7, 0xea, 0x92, 0x90, 0xad, 0xfd, 0x28, 0x3f,
	0x52, 0x09, 0xe3, 0x54, 0x1b, 0x0b, 0x52, 0xb6, 0x5a, 0x88, 0x0b, 0x62, 0x43, 0x94, 0x90, 0x70,
	0xf3, 0x1d, 0xa3, 0x44, 0x28, 0x45, 0x89, 0x30, 0x2e, 0x9c, 0x09, 0x76, 0x15, 0x4e, 0xce, 0xd3,
	0x2a, 0x74, 0xd2, 0xbb, 0xab, 0x50, 0x59, 0x4f, 0x6c, 0xef, 0xfb, 0xec, 0x9c, 0x22, 0x9c, 0xed,
	0xac, 0xd2, 0xff, 0xda, 0xb4, 0xf4, 0xe7, 0x78, 0xb3, 0xd2, 0xdf, 0x75, 0xd5, 0xb9, 0x1b, 0x7a,
	0x6e, 0x32, 0xdc, 0xdc, 0x8f, 0x0e, 0x7a, 0x99, 0x0c, 0xcc, 0x9e, 0xc0, 0x9b, 0xbb, 0x86, 0xe8,
	0xe6, 0xae, 0x01, 0x2e, 0x0c, 0x0b, 0x7c, 0x73, 0x74, 0xd0, 0x7b, 0x9a, 0x45, 0x45, 0x21, 0x63,
	0xbd, 0x13, 0xd0, 0x37, 0x84, 0x92, 0x6f, 0x08, 0xe3, 0xc2, 0x99, 0x00, 0x3b, 0x3a, 0x49, 0x73,
	0x65, 0xde, 0xb9, 0x88, 0x18, 0x8c, 0x76, 0xb4, 0x41, 0xb8, 0xb0, 0x4c, 0x70, 0x2c, 0x8c, 0x41,
	0x97, 0xb9, 0x89, 0xa0, 0x63, 0x2d, 0x48, 0x8e, 0xb5, 0x10, 0x17, 0xc4, 0xc6, 0x53, 0xfb, 0x03,
	0x59, 0x3c, 0x4d, 0xb2, 0xa3, 0xff, 0xab, 0x53, 0x7b, 0xc1, 0x33, 0x2d, 0xb7, 0x8b, 0x7e, 0xde,
	0x64, 0x3b, 0x0b, 0x84, 0x21, 0x4c, 0x07, 0x93, 0x42, 0xe6, 0xbd, 0xc8, 0x1c, 0x24, 0x18, 0x26,
	0x83, 0x51, 0x98, 0x0c, 0xc2, 0x85, 0x65, 0x42, 0x98, 0xd4, 0x38, 0x19, 0x17, 0xee, 0x99, 0x61,
	0x41, 0x0a, 0x93, 0x85, 0xb8, 0x20, 0x36, 0xa4, 0x68, 0x7a, 0x54, 0xa0, 0xf1, 0x15, 0x4a, 0x51,
	0x0d, 0x51, 0x8a, 0x6a, 0x80, 0x0b, 0xc3, 0x82, 0x65, 0xe3, 0x10, 0x0c, 0x3b, 0xe7, 0x85, 0xc1,
	0x68, 0xd9, 0x06, 0xe1, 0xc2, 0x32, 0xf9, 0xaf, 0x9a, 0x6c, 0x47, 0x77, 0xc6, 0x95, 0xa4, 0xb8,
	0xc1, 0xd6, 0x32, 0x99, 0x8f, 0x87, 0x85, 0x4e, 0x0b, 0x74, 0xac, 0x42, 0xc8, 0xb1, 0x8a, 0xe6,
	0x42, 0x33, 0x20, 0xb8, 0xe3, 0x38, 0x2a, 0x74, 0x73, 0x8c, 0xc1, 0x05, 0x9a, 0x82, 0x0b, 0x14,
	0x17, 0x08, 0xc2, 0xe4, 0xbe, 0xcc, 0x43, 0x37, 0x13, 0x80, 0xa6, 0xc9, 0x40, 0x71, 0x81, 0x20,
	0x38, 0x47, 0x0e, 0x83, 0x14, 0x6a, 0xcb, 0x2a, 0x75, 0xde, 0x1a, 0x22, 0xe7, 0x68, 0x80, 0x0b,
	0xc3, 0xf2, 0xde, 0x65, 0xeb, 0x79, 0x2a, 0x43, 0xe8, 0xbd, 0x5b, 0xf4, 0x20, 0x00, 0x45, 0xce,
	0xcb, 0x32, 0x45, 0x73, 0xa1, 0x19, 0xfc, 0x8f, 0x0d, 0xec, 0xf7, 0x9e, 0xdf, 0x36, 0xb9, 0x6b,
	0x33, 0x7f, 0xe5, 0xca, 0xca, 0xd5, 0xf6, 0xf5, 0x0b, 0xf5, 0xfb, 0xea, 0xf2, 0xd9, 0xfe, 0xdb,
	0x35, 0xb6, 0xae, 0x05, 0x5e, 0xf6, 0xac, 0x2f, 0x7b, 0xd6, 0x17, 0xac, 0x67, 0xb5, 0x07, 0xce,
	0xd6, 0x12, 0x07, 0x0e, 0xff, 0x4b, 0xc3, 0x36, 0x74, 0xcf, 0x6f, 0xef, 0x77, 0x6b, 0x7b, 0xbf,
	0xb3, 0xa8, 0x57, 0x5d, 0x7e, 0xff, 0xff, 0x98, 0xb5, 0x1d, 0x99, 0x7f, 0xbb, 0x37, 0xb5, 0x0e,
	0x6d, 0x2e, 0xe3, 0xd0, 0x3f, 0x37, 0x4c, 0xe7, 0xf6, 0xfc, 0xfc, 0xf9, 0xdd, 0x9a, 0x3f, 0x77,
	0x17, 0xf4, 0xa4, 0xcb, 0xbb, 0xf3, 0x37, 0xab, 0x8c, 0x91, 0xcc, 0xcb, 0x1e, 0xf4, 0x85, 0xe8,
	0x41, 0x6d, 0xd2, 0x6f, 0x2c, 0x93, 0xf4, 0x7f, 0x6a, 0xa8, 0x2e, 0xed, 0xf9, 0xa5, 0xfc, 0xfb,
	0xb5, 0x94, 0x7f, 0x75, 0xae, 0xf7, 0x7c, 0x86, 0xdb, 0x72, 0x8b, 0x6d, 0x18, 0x09, 0x78, 0x0a,
	0xa7, 0xcd, 0xc4, 0x55, 0xe8, 0x7c, 0xd0, 0xab, 0x50, 0xb9, 0xb0, 0x6a, 0xf2, 0x00, 0x3a, 0x98,
	0x1e, 0xde, 0x71, 0xdd, 0x4b, 0x01, 0xa1, 0xe4, 0x79, 0xc2, 0xb8, 0x70, 0x26, 0xc0, 0x3e, 0x40,
	0xca, 0x76, 0x0d, 0x7a, 0x1f, 0x58, 0x90, 0xf6, 0x81, 0x85, 0xb8, 0x20, 0xb6, 0x77, 0x8d, 0xb5,
	0x80, 0xc8, 0x75, 0x1e, 0xe3, 0x7f, 0x2f, 0x08, 0xd0, 0x7f, 0x2f, 0x48, 0x72, 0xa1, 0x60, 0x10,
	0x50, 0xbb, 0xae, 0x45, 0x02, 0x66, 0xc7, 0x69, 0x01, 0xbd, 0xdb, 0x14, 0x8c, 0xd7, 0x5e, 0xd8,
	0x65, 0x6b, 0xe4, 0x14, 0xbd, 0xc3, 0xcc, 0xb5, 0x17, 0x77, 0x17, 0x82, 0xde, 0x77, 0xd8, 0x16,
	0xfc, 0xf6, 0x52, 0x99, 0x85, 0x32, 0x2e, 0x74, 0x42, 0xbe, 0x35, 0x2d, 0xfd, 0x0a, 0x3e, 0x2b,
	0xfd, 0x1d, 0x12, 0x36, 0x28, 0x17, 0x95, 0x49, 0xb0, 0x49, 0xb0, 0xc7, 0xd3, 0x2e, 0xde, 0xa0,
	0x4d, 0xe2, 0xc0, 0xb4, 0x49, 0x1c, 0x90, 0x0b, 0x77, 0x0a, 0x84, 0x4a, 0x91, 0xe8, 0xe6, 0x4d,
	0x0a, 0x15, 0xa1, 0x14, 0x2a, 0xc2, 0xb8, 0x70, 0x26, 0x40, 0xcf, 0x80, 0x54, 0xae, 0x4f, 0x7f,
	0x4c, 0x2f, 0x85, 0x50, 0x7a, 0x29, 0x9a, 0x0b, 0xcd, 0xb0, 0x3b, 0xab, 0xbd, 0xec, 0xf9, 0xac,
	0x3b, 0xb7, 0xff, 0xd5, 0xf3, 0xd9, 0x59, 0xde, 0x72, 0xfb, 0xeb, 0x93, 0x26, 0x6b, 0x3b, 0x42,
	0x2f, 0x62, 0x17, 0x6a, 0x93, 0xa0, 0xb5, 0x4c, 0x12, 0x24, 0x6c, 0xb7, 0x9b, 0xc4, 0x51, 0x91,
	0x64, 0x51, 0x3c, 0xd8, 0x4f, 0xe2, 0xc3, 0x68, 0x60, 0xfe, 0xd1, 0x7d, 0xc8, 0x56, 0x23, 0x68,
	0x40, 0x1a, 0x18, 0xda, 0xd7, 0xab, 0x07, 0x7d, 0x4d, 0x86, 0x22, 0x14, 0x26, 0xa3, 0x11, 0x1e,
	0xce, 0x3a, 0x42, 0x8a, 0xe6, 0x42, 0x33, 0x78, 0xca, 0x3a, 0xf3, 0x06, 0x75, 0xe6, 0xfd, 0x77,
	0x2c, 0x7e, 0xb2, 0xc2, 0x2e, 0x2c, 0x92, 0xf6, 0x06, 0x6c, 0x07, 0xff, 0x53, 0xd6, 0xff, 0xf5,
	0xc6, 0x85, 0xcc, 0x9e, 0x04, 0x43, 0xb4, 0xde, 0xba, 0xf5, 0xe5, 0x69, 0xe9, 0x2f, 0x62, 0xcf,
	0x4a, 0x7f, 0xcf, 0xf9, 0x67, 0xba, 0xca, 0xe4, 0x62, 0x91, 0x88, 0xf7, 0x94, 0xed, 0x22, 0x1c,
	0x26, 0xc3, 0xa1, 0x0c, 0x8b, 0x24, 0x23, 0x63, 0x4d, 0x34, 0xf6, 0xf5, 0x69, 0xe9, 0x1f, 0x37,
	0x65, 0x56, 0xfa, 0x9f, 0x75, 0x0c, 0xce, 0x4f, 0xe0, 0xe2, 0x38, 0x51, 0x68, 0x02, 0x46, 0xc1,
	0x0f, 0x7b, 0x8f, 0x93, 0xbc, 0xe8, 0x85, 0xc9, 0x38, 0x2e, 0x30, 0x0f, 0x5b, 0xaa, 0x09, 0xa8,
	0x72, 0xa8, 0x09, 0xa8, 0xe2, 0x5c, 0xd4, 0x26, 0x7a, 0x3d, 0x76, 0x7e, 0x64, 0xdd, 0xd9, 0x4b,
	0x93, 0x61, 0x14, 0x4e, 0xf4, 0x8b, 0x84, 0x2f, 0x4d, 0x4b, 0x7f, 0x9e, 0x39, 0x2b, 0xfd, 0x8e,
	0x56, 0x5d, 0x67, 0x71, 0x31, 0x3f, 0x9d, 0xff, 0x61, 0x9d, 0xed, 0xdc, 0x8d, 0xf3, 0x22, 0x18,
	0x0e, 0xbf, 0x09, 0x8e, 0x3c, 0x05, 0x9f, 0x18, 0xdc, 0x64, 0x9b, 0xe9, 0xf8, 0x60, 0x18, 0x85,
	0xf4, 0x8d, 0x01, 0x96, 0x0a, 0x0b, 0x52, 0xa9, 0xb0, 0x10, 0x17, 0xc4, 0x06, 0x05, 0xd0, 0x75,
	0xba, 0x1f, 0x19, 0xa0, 0x02, 0x0b, 0x92, 0x02, 0x0b, 0x71, 0x41, 0x6c, 0x78, 0xd6, 0x3c, 0x7f,
	0xdc, 0x3b, 0x92, 0x13, 0xfd, 0x21, 0x0c, 0x3e, 0xab, 0x86, 0xe8, 0x59, 0x35, 0xc0, 0x85, 0x61,
	0x61, 0x9f, 0x9b, 0xa7, 0x73, 0x5f, 0xc0, 0x18, 0xcc, 0xe9, 0x73, 0x35, 0x02, 0x7d, 0xae, 0x1e,
	0x42, 0xad, 0x49, 0x93, 0xac, 0x70, 0xaf, 0x72, 0x40, 0x53, 0xad, 0x01, 0x8a, 0x0b, 0x04, 0xe1,
	0xb4, 0xae, 0x7c, 0x6f, 0xb3, 0x89, 0x42, 0x78, 0x5a, 0xbb, 0x38, 0x9d, 0xd6, 0x2e, 0xca, 0x45,
	0x65, 0x12, 0x5e, 0xaa, 0xc3, 0xa3, 0xaf, 0x62, 0x70, 0x19, 0x2d, 0xdb, 0x60, 0xce, 0xa5, 0x5a,
	0x23, 0x70, 0xa9, 0xd6, 0x43, 0xef, 0x1e, 0x7b, 0x25, 0x48, 0x23, 0xd0, 0x27, 0xb3, 0xde, 0x38,
	0x1b, 0xea, 0x03, 0xf3, 0xf3, 0xd3, 0xd2, 0xaf, 0x32, 0x66, 0xa5, 0x7f, 0x41, 0x7f, 0x1b, 0xe2,
	0xc2, 0x5c, 0x54, 0xa7, 0x41, 0xf8, 0x34, 0x15, 0x06, 0xba, 0x3b, 0xc6, 0xf0, 0x59, 0x90, 0xc2,
	0x67, 0x21, 0x2e, 0x88, 0x8d, 0x9d, 0xe4, 0x30, 0x82, 0xaa, 0x11, 0x06, 0x9d, 0x57, 0x48, 0x81,
	0x05, 0x9d, 0x4e, 0xd2, 0x40, 0xd0, 0x49, 0x9a, 0x31, 0xbe, 0xb2, 0x51, 0x04, 0xa4, 0xc0, 0x59,
	0xfa, 0x68, 0x8b, 0x50, 0xe7, 0x95, 0x8d, 0xc5, 0xb8, 0x70, 0x26, 0x40, 0x84, 0x34, 0x55, 0x24,
	0x47, 0x32, 0xee, 0x6c, 0x53, 0x84, 0x5c, 0x9c, 0x22, 0xe4, 0xa2, 0x5c, 0x54, 0x26, 0x5d, 0xff,
	0x07, 0x63, 0x2b, 0xdd, 0x7b, 0x1f, 0x78, 0x8f, 0xd8, 0xd9, 0x3b, 0xb2, 0x70, 0xde, 0x8b, 0x7a,
	0xd5, 0x57, 0xcf, 0x0b, 0xbe, 0x26, 0xda, 0xab, 0xce, 0x58, 0xf0, 0x4e, 0x95, 0x9f, 0xf1, 0x06,
	0x6c, 0xf7, 0x8e, 0x2c, 0x2a, 0xdf, 0x5f, 0x99, 0x57, 0x73, 0x6f, 0xd4, 0x0c, 0x2c, 0xfc, 0x44,
	0x6b, 0xef, 0x8d, 0x93, 0xbe, 0x65, 0x71, 0x0c, 0x25, 0xec, 0xe2, 0x02, 0x43, 0xf6, 0x25, 0xc0,
	0x72, 0xc6, 0xae, 0x7e, 0xda, 0x9f, 0xe4, 0x8e, 0xc1, 0x11, 0xdb, 0xab, 0x1b, 0x74, 0xba, 0xe4,
	0xe5, 0xec, 0xbd, 0xf5, 0x29, 0x7f, 0x16, 0x3b, 0xe6, 0x22, 0xd6, 0xa9, 0x9b, 0xb3, 0x3d, 0xca,
	0x72, 0xc6, 0xde, 0x3c, 0xf1, 0xef, 0xb8, 0x93, 0x5d, 0xe9, 0x5e, 0xd7, 0xfe, 0x15, 0x57, 0x9e,
	0xf0, 0x6f, 0x0c, 0x3f, 0xe3, 0xdd, 0x63, 0xdb, 0x68, 0xd0, 0x49, 0x8e, 0x4b, 0xf5, 0xec, 0xab,
	0x28, 0xbf, 0xb4, 0xe8, 0xe5, 0xb0, 0xa3, 0xf0, 0x23, 0xb6, 0xe3, 0x28, 0xb4, 0x49, 0x70, 0xb2,
	0xd2, 0x2b, 0xc7, 0xbd, 0x75, 0x72, 0x14, 0x7f, 0xc8, 0x3c, 0xa3, 0xd8, 0x09, 0xf6, 0xc9, 0x7a,
	0xfd, 0x63, 0xde, 0xbe, 0x38, 0x6a, 0xef, 0xb3, 0x73, 0x46, 0xad, 0x0d, 0xea, 0xc9, 0x4a, 0x2f,
	0x2f, 0xec, 0x6f, 0x17, 0xbb, 0xc0, 0x0d, 0xde, 0xb3, 0xb8, 0x60, 0x41, 0xdf, 0xc1, 0xcf, 0x78,
	0x3f, 0x60, 0x5b, 0x0f, 0x64, 0x01, 0x9e, 0xc5, 0x4b, 0x5a, 0x2d, 0x1d, 0x8e, 0xb9, 0xa7, 0xd6,
	0x92, 0xef, 0xb8, 0xcb, 0x25, 0x3f, 0x03, 0xd5, 0xed, 0x8e, 0xab, 0xde, 0xab, 0x08, 0xe2, 0x27,
	0xc9, 0xcb, 0x2b, 0xeb, 0xb2, 0xb3, 0x42, 0xe6, 0xff, 0x31, 0x75, 0xdf, 0x63, 0x5b, 0xee, 0x95,
	0xa7, 0x56, 0x22, 0x17, 0xdc, 0x86, 0x6a, 0x89, 0x5a, 0xfb, 0x8e, 0x9a, 0x9f, 0x39, 0x58, 0xc3,
	0x8f, 0xad, 0x6f, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xa1, 0xcc, 0x7b, 0xb0, 0x2d, 0x00,
	0x00,
}
